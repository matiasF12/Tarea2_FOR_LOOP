str(Casen2017)
sapply(Casen2017, function(x) sum(is.null(x)))
sapply(Casen2017, function(x) sum(is.na(x)))
sapply(Casen2017, function(x) sum(is.na(x)))
sapply(Casen2017, function(x) sum(is.na(x)))
sapply(Casen2017, function(x) sum(is.na(x)))
#datos vacios y datos null
sapply(Casen2017, function(x) sum(is.null(x)))
Casen2017$r9b[Casen2017$r9b == ""] <-
#muestra que categorias tiene la variable
select(Casen2017, r9b)%>% unique
Casen2017$r9b[Casen2017$r9b == ""] <-
#muestra que categorias tiene la variable
select(Casen2017, r9b)%>% unique
#muestra que categorias tiene la variable
select(Casen2017, r9b)%>% unique
Casen2017$r9b[Casen2017$r9b == ""] <- No
Casen2017$r9b[Casen2017$r9b == ""] <- "No"
#muestra que categorias tiene la variable
select(Casen2017, r9b)%>% unique
select(Casen2017, r9b)%>% count("rb9")
str(Casen2017)
sapply(Casen2017, function(x) sum(is.na(x)))
###no sabemos si usar qaut o qautr (autonomo nacional o regional)
Casen2017 <- Casen_2017%>%
select(region, zona, sexo, edad, ecivil, e6a, ch1, y1, y2_hrs, y3a, s4, expr, qaut, qautr)%>%
filter(edad>=15) %>% filter(ch1=="Asalariado") %>% arrange(region,edad,y1)
select(Casen2017, region)%>% count("region")
#muestra que categorias tiene la variable
select(Casen2017, r9b)%>% unique
#muestra que categorias tiene la variable
select(Casen2017, region)%>% unique
rm(unwanted_array)
#creacion de variable niv_Educ
Casen2017 <- mutate(Casen_2017, niv_educ = e6a)
str(Casen2017)
#agrupar niveles educacionales (pre basica, basica, media, universitaria, post universitaria)
### No puedo hacer que sala cuna, jardin infantil y pre kinder o kinder sean una sola (pre basica)
Casen2017$niv_educ[Casen2017$niv_educ == "3"] <- 2
###no sabemos si usar qaut o qautr (autonomo nacional o regional)
Casen2017 <- Casen_2017%>%
select(region, zona, sexo, edad, ecivil, e6a, ch1, y1, y2_hrs, y3a, s4, expr, qaut, qautr)%>%
filter(edad>=15) %>% filter(ch1=="Asalariado") %>% arrange(region,edad,y1)
#creacion de variable niv_Educ
Casen2017 <- mutate(Casen_2017, niv_educ = e6a)
###no sabemos si usar qaut o qautr (autonomo nacional o regional)
Casen2017 <- Casen_2017%>%
select(region, zona, sexo, edad, ecivil, e6a, ch1, y1, y2_hrs, y3a, s4, expr, qaut, qautr)%>%
filter(edad>=15) %>% filter(ch1=="Asalariado") %>% arrange(region,edad,y1)
#creacion de variable niv_Educ
Casen2017 <- mutate(Casen2017, niv_educ = e6a)
#agrupar niveles educacionales (pre basica, basica, media, universitaria, post universitaria)
### No puedo hacer que sala cuna, jardin infantil y pre kinder o kinder sean una sola (pre basica)
Casen2017$niv_educ[Casen2017$niv_educ == "3"] <- 2
View(Casen2017)
#agrupar niveles educacionales (pre basica, basica, media, universitaria, post universitaria)
### No puedo hacer que sala cuna, jardin infantil y pre kinder o kinder sean una sola (pre basica)
Casen2017$niv_educ[Casen2017$niv_educ == "Sala cuna"] <- "Educacion Pre basica"
Casen2017$niv_educ <- as.character(Casen2017$niv_educ)
str(Casen2017)
#agrupar niveles educacionales (pre basica, basica, media, universitaria, post universitaria)
### No puedo hacer que sala cuna, jardin infantil y pre kinder o kinder sean una sola (pre basica)
Casen2017$niv_educ[Casen2017$niv_educ == "Sala cuna"] <- "Educacion Pre basica"
#muestra que categorias tiene la variable
select(Casen2017, e6a)%>% unique
select(Casen2017, region)%>% count("e6a")
Casen2017$niv_educ[Casen2017$niv_educ == "Jardín Infantil (Medio menor y Medio mayor)"] <- "Educacion pre Basica"
#agrupar niveles educacionales (pre basica, basica, media, universitaria, post universitaria)
### No puedo hacer que sala cuna, jardin infantil y pre kinder o kinder sean una sola (pre basica)
Casen2017$niv_educ[Casen2017$niv_educ == "Sala cuna"] <- "Educacion Pre basica"
#agrupar niveles educacionales (pre basica, basica, media, universitaria, post universitaria)
### No puedo hacer que sala cuna, jardin infantil y pre kinder o kinder sean una sola (pre basica)
Casen2017$niv_educ[Casen2017$niv_educ == "Sala cuna"] <- "Educacion Pre basica"
Casen2017$niv_educ[Casen2017$niv_educ == "Jardín Infantil (Medio menor y Medio mayor)"] <- "Educacion pre Basica"
#agrupar niveles educacionales (pre basica, basica, media, universitaria, post universitaria)
### No puedo hacer que sala cuna, jardin infantil y pre kinder o kinder sean una sola (pre basica)
Casen2017$niv_educ[Casen2017$niv_educ == "Sala cuna"] <- "Educacion Pre basica"
rm(Casen2017)
###no sabemos si usar qaut o qautr (autonomo nacional o regional)
Casen2017 <- Casen_2017%>%
select(region, zona, sexo, edad, ecivil, e6a, ch1, y1, y2_hrs, y3a, s4, expr, qaut, qautr)%>%
filter(edad>=15) %>% filter(ch1=="Asalariado") %>% arrange(region,edad,y1)
#muestra que categorias tiene la variable
select(Casen2017, e6a)%>% unique
select(Casen2017, region)%>% count("e6a")
#creacion de variable niv_Educ
Casen2017 <- mutate(Casen2017, niv_educ = e6a)
Casen2017$niv_educ <- as.character(Casen2017$niv_educ)
Casen2017$niv_educ[Casen2017$niv_educ == "Jardín Infantil (Medio menor y Medio mayor)"] <- "Educacion pre Basica"
Casen2017$niv_educ[Casen2017$niv_educ == "Sala cuna"] <- "Educacion pre basica"
Casen2017$niv_educ[Casen2017$niv_educ == "Prekinder/Kinder (Transición menor y Transición Mayor)"] <- "Educacion pre basica"
Casen2017$niv_educ[Casen2017$niv_educ == "Educación Especial (Diferencial)"] <- "Educacion basica"
Casen2017$niv_educ[Casen2017$niv_educ == "Primaria o Preparatoria (Sistema antiguo)"] <- "Educacion basica"
Casen2017$niv_educ[Casen2017$niv_educ == "Educación Básica"] <- "Educacion basica"
Casen2017$niv_educ[Casen2017$niv_educ == "Humanidades (Sistema Antiguo)"] <- "Educacion media"
Casen2017$niv_educ[Casen2017$niv_educ == "Educación Media Científico-Humanista"] <- "Educacion media"
Casen2017$niv_educ[Casen2017$niv_educ == "Educación Media Técnica Profesional"] <- "Educacion media"
Casen2017$niv_educ[Casen2017$niv_educ == "Técnica, Comercial, Industrial o Normalista (Sistema Antiguo)"] <- "Educacion media"
Casen2017$niv_educ[Casen2017$niv_educ == "Técnica, Comercial, Industrial o Normalista (Sistema Antiguo"] <- "Educacion media"
Casen2017$niv_educ <- as.factor(Casen2017$niv_educ)
str(Casen2017)
#####ejercicio 1 prueba######
####NO ME DIO#####
ordenamiento <- function(a,b,c,d){
if(a > b){
tmp <- a
a <- b
b <- tmp
}
if(c > d){
tmp <- c
c <- d
d <- tmp
}
if(b > c){
tmp <- b
b <- c
c <- tmp
}
print(paste(a,b,c,d, sep = "-"))
}
ordenamiento(4,6,3,1)
#####ejercicio 1 prueba######
####NO ME DIO#####
ordenamiento <- function(a,b,c,d){
if(a > b){
tmp <- a
a <- b
b <- tmp
}
if(c > d){
tmp <- c
c <- d
d <- tmp
}
if(b > c){
tmp <- b
b <- c
c <- tmp
}
print(paste(a,b,c,d, sep = "-"))
}
ordenamiento(4,6,3,1)
vec <- c(23, 423, 42, 5, 324, 325, 64, 36734, 7, 356, 67, 45, 62, 5, 23, 623, 21523, 5)
numeros <- 1:1000
numeros <- 1:100000
for(numero in numeros){
#para que solo muestre un avance y no todos los numeros
Porcentaje <- numero/length(numeros)*100
if(Porcentaje %% 10 == 0){
print(paste(Porcentaje,"%"))
print(numero)
}
}
vec <- c(23, 423, 42, 5, 324, 325, 64, 36734, 7, 356, 67, 45, 62, 5, 23, 623, 21523, 5)
for(repeticion in 1:length(vec)){
print(paste("#################################### Repeticion Nro", repeticion, "####################"))
for (posicion in 1:(length(vec)-1)) {
print(paste("************************************ iteracion nro", posicion, "******************************"))
print(paste("Cuando posicion vale", posicion, "entonces el valor de vec[posicion] es", vec[posicion]))
print(paste("Cuando posicion vale", posicion+1, "entonces el valor de vec[posicion+1] es", vec[posicion+1]))
if(vec[posicion] > vec[posicion+1]){
tmp <- vec[posicion]
vec[posicion] <- vec[posicion+1]
vec[posicion+1] <- tmp
}
print("........................Cambiados mayores por menores...............")
print(paste("Cuando posicion vale", posicion, "entonces el valor de vec[posicion] es", vec[posicion]))
print(paste("Cuando posicion vale", posicion+1, "entonces el valor de vec[posicion+1] es", vec[posicion+1]))
}
}
vec
install.packages("foreign")
library("tidyverse")
library(readstata13)
library(foreign)
Casen_2017 <- read.dta("C:/Users/Matias/Downloads/BRECHA SALARIAL/INFORMACION_PARA_TESIS_/BASES DE DATO CASEN SIN MODIFICAR/Casen 2017.dta")
library(haven)
Casen_2017 <- read_dta("C:/Users/Matias/Downloads/BRECHA SALARIAL/INFORMACION_PARA_TESIS_/BASES DE DATO CASEN SIN MODIFICAR/Casen 2017.dta")
View(Casen_2017)
Casen_2017 <- Casen_2017 <- read.dta("C:/Users/Matias/Downloads/BRECHA SALARIAL/INFORMACION_PARA_TESIS_/BASES DE DATO CASEN SIN MODIFICAR/Casen 2017.dta")
library(foreign)
install.packages("foreign")
install.packages("foreign")
install.packages("foreign")
library("tidyverse")
library(foreign)
Casen_2017 <- read.dta("C:/Users/Matias/Downloads/BRECHA SALARIAL/INFORMACION_PARA_TESIS_/BASES DE DATO CASEN SIN MODIFICAR/Casen 2017.dta")
?read.dta
vec <- c(23, 423, 42, 5, 324, 325, 64, 36734, 7, 356, 67, 45, 62, 5, 23, 623, 21523, 5)
for(repeticion in 1:length(vec)){
print(paste("#################################### Repeticion Nro", repeticion, "####################"))
for (posicion in 1:(length(vec)-1)) {
print(paste("************************************ iteracion nro", posicion, "******************************"))
print(paste("Cuando posicion vale", posicion, "entonces el valor de vec[posicion] es", vec[posicion]))
print(paste("Cuando posicion vale", posicion+1, "entonces el valor de vec[posicion+1] es", vec[posicion+1]))
if(vec[posicion] > vec[posicion+1]){
tmp <- vec[posicion]
vec[posicion] <- vec[posicion+1]
vec[posicion+1] <- tmp
}
print("........................Cambiados mayores por menores...............")
print(paste("Cuando posicion vale", posicion, "entonces el valor de vec[posicion] es", vec[posicion]))
print(paste("Cuando posicion vale", posicion+1, "entonces el valor de vec[posicion+1] es", vec[posicion+1]))
}
}
Numeros <- c(4,6,7,4,5,6,4,5,6,7,4,3,2,4,6,5,7,8,2)
median(Numeros)
Numeros <- c(4,6,7,4,5)
median(Numeros)
# Elaborar una funcion que entregue la media, mediana, max y min de un vector con N datos.
# Entrada: Vec numeros (enteros o integer) --> Salida: - Media: Double
#                                                      - Mediana: Double
median(Numeros)
Numeros <- c(4,6,7,4,5,4,9,7)
median(Numeros)
for (valor in 1:(length(Numeros)-1)){
if(Numeros[valor] > Numeros[valor+1]){
tmp <- Numeros[valor]
vec[valor] <- Numeros[valor+1]
Numeros[valor+1] <- tmp
}
}
for (valor in 1:(length(Numeros)-1)){
if(Numeros[valor] > Numeros[valor+1]){
tmp <- Numeros[valor]
Numeros[valor] <- Numeros[valor+1]
Numeros[valor+1] <- tmp
}
}
Numeros
Numeros <- c(4,6,7,4,5,4,9,7)
vec <- c(23, 423, 42, 5, 324, 325, 64, 36734, 7, 356, 67, 45, 62, 5, 23, 623, 21523, 5)
vec <- c(23, 423, 42, 5, 324, 325, 64, 36734, 7, 356, 67, 45, 62, 5, 23, 623, 21523, 5)
for(repeticion in 1:length(vec)){
print(paste("#################################### Repeticion Nro", repeticion, "####################"))
for (posicion in 1:(length(vec)-1)) {
print(paste("************************************ iteracion nro", posicion, "******************************"))
print(paste("Cuando posicion vale", posicion, "entonces el valor de vec[posicion] es", vec[posicion]))
print(paste("Cuando posicion vale", posicion+1, "entonces el valor de vec[posicion+1] es", vec[posicion+1]))
if(vec[posicion] > vec[posicion+1]){
tmp <- vec[posicion]
vec[posicion] <- vec[posicion+1]
vec[posicion+1] <- tmp
}
print("........................Cambiados mayores por menores...............")
print(paste("Cuando posicion vale", posicion, "entonces el valor de vec[posicion] es", vec[posicion]))
print(paste("Cuando posicion vale", posicion+1, "entonces el valor de vec[posicion+1] es", vec[posicion+1]))
}
}
vec
Numeros <- c(4,6,7,4,5,4,9,7)
for (valor in 1:(length(Numeros)-1)){
if(Numeros[valor] > Numeros[valor+1]){
tmp <- Numeros[valor]
Numeros[valor] <- Numeros[valor+1]
Numeros[valor+1] <- tmp
}
}
Numeros
for (valor in 1:(length(Numeros)-1)){
if(Numeros[valor] > Numeros[valor+1]){
tmp <- Numeros[valor]
Numeros[valor] <- Numeros[valor+1]
Numeros[valor+1] <- tmp
}
}
Numeros
Numeros <- c(4,6,7,4,5,4,9,7)
for (valor in 1:(length(Numeros)-1)){
if(Numeros[valor] > Numeros[valor+1]){
tmp <- Numeros[valor]
Numeros[valor] <- Numeros[valor+1]
Numeros[valor+1] <- tmp
}
}
Numeros
for (repeticion in 1:length(Numeros)){
for(valor in 1:length(Numeros)-1){
if(Numeros[valor] > Numeros[valor+1]){
tmp <- Numeros[valor]
Numeros[valor] <- Numeros[valor+1]
Numeros[valor+1] <- tmp
}
}
}
for (repeticion in 1:length(Numeros)){
for(valor in 1:(length(Numeros)-1)){
if(Numeros[valor] > Numeros[valor+1]){
tmp <- Numeros[valor]
Numeros[valor] <- Numeros[valor+1]
Numeros[valor+1] <- tmp
}
}
}
Numeros
length(Numeros)/2
if(length(Numeros)%% 2 == 0){
posicion <- (length(Numeros)/2)
Mediana <- (Numeros[posicion]+ Numeros[posicion+1])/2
}
if(length(Numeros)%% 2 == 0){
Mediana <- (Numeros[(length(Numeros)/2)]+ Numeros[(length(Numeros)/2)+1])/2
}else if(length(Numeros)%% 2 != 0){
Mediana <- (Numeros[((length(Numeros)-1)/2)+1])
}
Numeros
if(length(Numeros)%% 2 == 0){
Mediana <- (Numeros[(length(Numeros)/2)]+ Numeros[(length(Numeros)/2)+1])/2
print(paste("La mediana es", Mediana, "para este vector"))
}else if(length(Numeros)%% 2 != 0){
Mediana <- (Numeros[((length(Numeros)-1)/2)+1])
print(paste("La mediana es", Mediana, "para este vector"))
}
Numeros
if(length(Numeros)%% 2 == 0){
Mediana <- (Numeros[(length(Numeros)/2)]+ Numeros[(length(Numeros)/2)+1])/2
print(paste("La mediana es", Mediana, "para este vector"))
}else if(length(Numeros)%% 2 != 0){
Mediana <- (Numeros[((length(Numeros)-1)/2)+1])
print(paste("La mediana es", Mediana, "para este vector"))
}
sumar <- sum(length(Numeros))
sumar
rm(sumar)
if(length(Numeros)%% 2 == 0){
Mediana <- (Numeros[(length(Numeros)/2)]+ Numeros[(length(Numeros)/2)+1])/2
print(paste("La mediana es", Mediana, "para este vector"))
}else if(length(Numeros)%% 2 != 0){
Mediana <- (Numeros[((length(Numeros)-1)/2)+1])
print(paste("La mediana es", Mediana, "para este vector"))
}
library(tidyverse)
Grandes_CH <- read.csv2("grandes_chile.csv")
setwd("~/Github/Tarea2_FOR_LOOP")
Grandes_CH <- read.csv2("grandes_chile.csv")
View(Grandes_CH)
Grandes_PE <- read.csv2("grandes_peru.csv")
View(Grandes_PE)
Grandes_CO <- read.csv2("grandes_colombia.csv")
View(Grandes_CO)
#Empresas medianas
Mediana_CH <- read.csv2("medianas_chile.csv")
View(Mediana_CH)
Mediana_CO <- read.csv2("medianas_colombia.csv")
Mediana_PE <- read.csv2("medianas_peru.csv")
#Micro empresas
Micro_CH <- read.csv2("micro_chile.csv")
Micro_CO <- read.csv2("micro_colombia.csv")
Micro_PE <- read.csv2("micro_peru.csv")
#Pequena empresa
Pequena_CH <- read.csv2("pequena_chile.csv")
Peqiena_CO <- read.csv2("pequena_colombia.csv")
Pequena_PE <- read.csv2("pequena_peru.csv")
Pequena_CO <- read.csv2("pequena_colombia.csv")
rm(Peqiena_CO)
View(Grandes_CH)
str(Grandes_CH)
Grandes_CH <- mutate(Grandes_CH, tamanio = pais)
#cambiar dato a tamano empresa
Grandes_CH$tamanio[Grandes_CH$tamanio == chile] <- "grande"
#cambiar dato a tamano empresa
Grandes_CH$tamanio[Grandes_CH$tamanio == "chile"] <- "grande"
View(Grandes_CH)
#generar variable en base a pais
Grandes_CO <- mutate(Grandes_CO, tamanio = pais)
#cambiar dato a tamano empresa
Grandes_CH$tamanio[Grandes_CH$tamanio == "colombia"] <- "grande"
View(Grandes_CO)
#cambiar dato a tamano empresa
Grandes_CH$tamanio[Grandes_CH$tamanio == "colombia"] <- "grande"
View(Grandes_CO)
Grandes_CO <- read.csv2("grandes_colombia.csv")
View(Grandes_CO)
#generar variable en base a pais
Grandes_CO <- mutate(Grandes_CO, tamanio = pais)
View(Grandes_CH)
#cambiar dato a tamano empresa
Grandes_CO$tamanio[Grandes_CO$tamanio == "colombia"] <- "grande"
View(Grandes_CO)
#generar variable en base a pais
Grandes_PE <- mutate(Grandes_PE, tamanio = pais)
#cambiar dato a tamano empresa
Grandes_PE$tamanio[Grandes_PE$tamanio == "peru"] <- "grande"
View(Grandes_PE)
#generar variable en base a pais
Mediana_CH <- mutate(Mediana_CH, tamanio = pais)
#cambiar dato a tamano empresa
Mediana_CH$tamanio[Mediana_CH$tamanio == "chile"] <- "mediana"
View(Mediana_CH)
#generar variable en base a pais
Mediana_PE <- mutate(Mediana_PE, tamanio = pais)
#cambiar dato a tamano empresa
Mediana_PE$tamanio[Mediana_PE$tamanio == "peru"] <- "mediana"
View(Mediana_PE)
#generar variable en base a pais
Mediana_CO <- mutate(Mediana_CO, tamanio = pais)
#cambiar dato a tamano empresa
Mediana_CO$tamanio[Mediana_CO$tamanio == "colombia"] <- "mediana"
View(Mediana_CO)
#generar variable en base a pais
Micro_CH <- mutate(Micro_CH, tamanio = pais)
#cambiar dato a tamano empresa
Micro_CH$tamanio[Micro_CH$tamanio == "chile"] <- "micro"
View(Micro_CH)
#generar variable en base a pais
Micro_CO <- mutate(Micro_CO, tamanio = pais)
View(Micro_CO)
#cambiar dato a tamano empresa
Micro_CO$tamanio[Micro_CO$tamanio == "colombia"] <- "micro"
View(Micro_CO)
#cambiar dato a tamano empresa
Micro_PE$tamanio[Micro_PE$tamanio == "peru"] <- "micro"
#generar variable en base a pais
Micro_PE <- mutate(Micro_PE, tamanio = pais)
#cambiar dato a tamano empresa
Micro_PE$tamanio[Micro_PE$tamanio == "peru"] <- "micro"
View(Micro_PE)
#generar variable en base a pais
Pequena_CH <- mutate(Pequena_CH, tamanio = pais)
#cambiar dato a tamano empresa
Pequena_CH$tamanio[Pequena_CH$tamanio == "chile"] <- "micro"
View(Micro_PE)
#generar variable en base a pais
Pequena_CO <- mutate(Pequena_CO, tamanio = pais)
#cambiar dato a tamano empresa
Pequena_CO$tamanio[Pequena_CO$tamanio == "colombia"] <- "micro"
View(Pequena_CH)
#cambiar dato a tamano empresa
Pequena_CH$tamanio[Pequena_CH$tamanio == "chile"] <- "pequena"
View(Pequena_CH)
#cambiar dato a tamano empresa
Pequena_CH$tamanio[Pequena_CH$tamanio == "micro"] <- "pequena"
View(Pequena_CO)
#cambiar dato a tamano empresa
Pequena_CO$tamanio[Pequena_CO$tamanio == "micro"] <- "pequena"
#generar variable en base a pais
Pequena_PE <- mutate(Pequena_PE, tamanio = pais)
#cambiar dato a tamano empresa
Pequena_PE$tamanio[Pequena_PE$tamanio == "peru"] <- "pequena"
View(Pequena_PE)
Empresas <- reduce(merge, list(Grandes_CH, Grandes_CO, Grandes_PE))
Empresas <- Reduce(merge, list(Grandes_CH, Grandes_CO, Grandes_PE))
View(Empresas)
Rm(Empresas)
Empresas <- Reduce(merge, list(Grandes_CH, Grandes_CO, Grandes_PE))
View(Empresas)
rm(Empresas)
View(Grandes_CH)
View(Grandes_CO)
View(Grandes_PE)
View(Mediana_PE)
View(Mediana_CO)
#cambiando nombre a variable porcentaje_mujeres (en alguans está mal escrito)
rename(Grandes_CH, porcentaje_mujeres=procentaje_mujeres)
View(Grandes_CH)
#cambiando nombre a variable porcentaje_mujeres (en alguans está mal escrito)
rename(Grandes_CH, porcentaje_mujeres = procentaje_mujeres)
View(Grandes_CH)
names(Grandes_CH)
rename(Grandes_PE, porcentaje_mujeres = procentaje_muejeres)
names(Grandes_PE)
View(Grandes_CH)
View(Grandes_CO)
View(Grandes_PE)
View(Mediana_CH)
View(Mediana_CO)
View(Grandes_CO)
View(Grandes_CH)
#cambiando nombre a variable porcentaje_mujeres (en alguans está mal escrito)
names(Grandes_CH) <- c("fecha", "pais", "ingresos", "costos", "porcentaje_mujeres", "exportaciones",
"importaciones","endeudamiento", "morosidad", "reservas", "spread", "tasa_interes", "tamanio")
names(Grandes_CO) <- c("fecha", "pais", "ingresos", "costos", "porcentaje_mujeres", "exportaciones",
"importaciones","endeudamiento", "morosidad", "reservas", "spread", "tasa_interes", "tamanio")
names(Grandes_PE) <- c("fecha", "pais", "ingresos", "costos", "porcentaje_mujeres", "exportaciones",
"importaciones","endeudamiento", "morosidad", "reservas", "spread", "tasa_interes", "tamanio")
View(Grandes_CO)
View(Grandes_PE)
names(Mediana_CH) <- c("fecha", "pais", "ingresos", "costos", "porcentaje_mujeres", "exportaciones",
"importaciones","endeudamiento", "morosidad", "reservas", "spread", "tasa_interes", "tamanio")
names(Mediana_CO) <- c("fecha", "pais", "ingresos", "costos", "porcentaje_mujeres", "exportaciones",
"importaciones","endeudamiento", "morosidad", "reservas", "spread", "tasa_interes", "tamanio")
names(Mediana_PE) <- c("fecha", "pais", "ingresos", "costos", "porcentaje_mujeres", "exportaciones",
"importaciones","endeudamiento", "morosidad", "reservas", "spread", "tasa_interes", "tamanio")
names(Micro_CO) <- c("fecha", "pais", "ingresos", "costos", "porcentaje_mujeres", "exportaciones",
"importaciones","endeudamiento", "morosidad", "reservas", "spread", "tasa_interes", "tamanio")
names(Micro_PE) <- c("fecha", "pais", "ingresos", "costos", "porcentaje_mujeres", "exportaciones",
"importaciones","endeudamiento", "morosidad", "reservas", "spread", "tasa_interes", "tamanio")
names(Pequena_CH) <- c("fecha", "pais", "ingresos", "costos", "porcentaje_mujeres", "exportaciones",
"importaciones","endeudamiento", "morosidad", "reservas", "spread", "tasa_interes", "tamanio")
names(Pequena_CO) <- c("fecha", "pais", "ingresos", "costos", "porcentaje_mujeres", "exportaciones",
"importaciones","endeudamiento", "morosidad", "reservas", "spread", "tasa_interes", "tamanio")
names(Pequena_PE) <- c("fecha", "pais", "ingresos", "costos", "porcentaje_mujeres", "exportaciones",
"importaciones","endeudamiento", "morosidad", "reservas", "spread", "tasa_interes", "tamanio")
Empresas <- as.data.table(rbind(Grandes_CH, Grandes_CO, Grandes_PE, Mediana_CH, Mediana_CO, Mediana_PE,
Micro_CH, Micro_CO, Micro_PE, Pequena_CH, Pequena_CO, Pequena_PE))
Empresas <- Reduce(merge, list(Grandes_CH, Grandes_CO, Grandes_PE, Mediana_CH, Mediana_CO, Mediana_PE,
Micro_CH, Micro_CO, Micro_PE, Pequena_CH, Pequena_CO, Pequena_PE))
View(Empresas)
View(Grandes_CH)
View(Grandes_CO)
View(Grandes_PE)
View(Mediana_CH)
View(Mediana_CO)
View(Mediana_PE)
View(Micro_CH)
names(Micro_CH) <- c("fecha", "pais", "ingresos", "costos", "porcentaje_mujeres", "exportaciones",
"importaciones","endeudamiento", "morosidad", "reservas", "spread", "tasa_interes", "tamanio")
Empresas <- Grandes_CH%>% union_all(Grandes_CO)%>% union_all(Grandes_PE)%>% union_all(Mediana_CH)%>%
union_all(Mediana_CO)%>% union_all(Mediana_PE)%>% union_all(Micro_CH)%>% union_all(Micro_CO)%>%
union_all(Micro_PE)%>% union_all(Pequena_CH)%>% union_all(Pequena_CO)%>% union_all(Pequena_PE)
View(Empresas)
